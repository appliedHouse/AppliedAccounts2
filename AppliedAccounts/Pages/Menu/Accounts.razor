@page "/Menu/Accounts"
@attribute [Authorize];
@inject NavigationManager NavManager;
@inject Globals _Global;
@using AppliedAccounts.Models;
@using ExcelDataReader
@using System.Data


@code {
    public Globals? AppValues { get; set; }
    public MenuCardModel? CardMenuModel { get; set; }
    public string COAText = "A chart of accounts is a documents that list all the transactions.";
    public string ClassText = "Classification of accounts are groups of chart of accounts.";
    public string TypeText = "Type of Accounts are gategory of charts of accounts";
    public DataSet MyDataset = new();


    protected override void OnInitialized()
    {

        AppValues = _Global;
        CardMenuModel = new() { TextMsg = "", NavTo = "", PicPath = "" };

    }

    public void LoadFiles()
    {
        NavManager.NavigateTo("/DownLoad");
    }

    public async void DownLoadMyFiles(InputFileChangeEventArgs e)
    {
        var _File = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "ExcelFiles", e.File.Name);


        using (FileStream fs = new(_File, FileMode.Create))
        { await e.File.OpenReadStream().CopyToAsync(fs); }
        //fs.Flush();
        //fs.Close();



        await Task.Delay(1000);

        DataSet _DataSet;

        using (var stream = File.Open(_File, FileMode.Open, FileAccess.Read))
        {
            // Auto-detect format, supports:
            //  - Binary Excel files (2.0-2003 format; *.xls)
            //  - OpenXml Excel files (2007 format; *.xlsx, *.xlsb)
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                // Choose one of either 1 or 2:

                // 1. Use the reader methods
                do
                {
                    while (reader.Read())
                    {
                        // reader.GetDouble(0);
                    }
                } while (reader.NextResult());

                // 2. Use the AsDataSet extension method
                _DataSet = reader.AsDataSet();

                // The result of each spreadsheet is in result.Tables
            }
            SetDataSet(_DataSet);

        }
    }


    public void SetDataSet(DataSet? _DataSet)
    {
        int Count = _DataSet.Tables.Count;


    }
}


<div class="container">
    <div class="row">
        <div class="col-4">
            <MenuCard Message=@COAText NavTo="/Accounts/COA1" PicPath="./images/Cards/COA.jpg" />
        </div>
        <div class="col-4">
            <MenuCard Message=@ClassText NavTo="/Accounts/COAClass" PicPath="./images/Cards/COAClass.jpg" />
        </div>
        <div class="col-4">
            <MenuCard Message=@TypeText NavTo="/Accounts/COANature" PicPath="./images/Cards/COANature.jpg" />
        </div>
    </div>
    <div class="row">
        <div class="col-4">
            <MenuCard Message=@TypeText NavTo="/Accounts/COANotes" PicPath="./images/Cards/COANotes.jpg" />
        </div>
        <div class="col-4">
            <MenuCard Message=@TypeText NavTo="/Accounts/CashBook" PicPath="./images/Cards/Cashbook&Pencil.jpg" />
        </div>
    </div>

</div>


<div class="container">
    <div class="row">
        <InputFile OnChange="DownLoadMyFiles" accept="Excel/*,.xlsx" Visible="true" runat="server"></InputFile>

        <button id="btn-download" @onclick="LoadFiles">DownLoad File</button>
    </div>


</div>


@if (MyDataset.Tables.Count > 0)
{
    <table>
        <thead>
            <tr>Col 1</tr>
            <tr>Col 2</tr>
            <tr>Col 4</tr>
            <tr>Col 1</tr>
        </thead>
        <tbody>
            @foreach (DataRow row in MyDataset.Tables[0].Rows)
            {
                <tr>
                    <td>@row[row.Table.Columns[0].ColumnName]</td>
                    <td>@row[row.Table.Columns[1].ColumnName]</td>
                    <td>@row[row.Table.Columns[2].ColumnName]</td>
                    <td>@row[row.Table.Columns[3].ColumnName]</td>
                </tr>
            }
        </tbody>
    </table>
}



