@layout LoginLayout
@page "/Users/Resetpw"
@using System.ComponentModel.DataAnnotations

<EditForm Model="@model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-wrapper">
        <div class="login-box">
            <div class="login-left">
                <img src="/images/ASH.jpg" alt="Logo" />
                <h2>APPLIED ACCOUNTS</h2>
                <p>ACCOUNTING SOFTWARE</p>
            </div>

            <div class="login-right">
                <h2>Reset Password</h2>
                <InputText class="input" type="password" @bind-Value="model.CurrentPassword" placeholder="Current Password" />
                <InputText class="input" type="password" @bind-Value="model.NewPassword" placeholder="New Password" />
                <InputText class="input" type="password" @bind-Value="model.ConfirmPassword" placeholder="Confirm New Password" />

                <button class="login-button" type="submit">Reset Password</button>

                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">
                        Password has been successfully changed!
                    </div>
                    <button type="button" class="btn btn-primary w-100 mt-2" @onclick="GoToLogin">Back to Login</button>
                }

                @if (isMismatch)
                {
                    <div class="alert alert-danger mt-3">
                        New password and confirm password do not match.
                    </div>
                }
            </div>
        </div>
    </div>
</EditForm>

<style>
    .login-wrapper {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(to right, #92e4d0, #a0c8e6);
    }

    .login-box {
        display: flex;
        background-color: #fff;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
        width: 800px;
    }

    .login-left {
        flex: 1;
        background-color: #002935;
        color: #fff;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px;
    }

        .login-left img {
            width: 200px;
            margin-bottom: 20px;
        }

        .login-left h2 {
            font-size: 20px;
            margin: 10px 0 5px;
        }

        .login-left p {
            font-size: 14px;
            margin: 0;
        }

    .login-right {
        flex: 1;
        padding: 40px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .login-right h2 {
            font-weight: bold;
            margin-bottom: 20px;
        }

    .input {
        width: 100%;
        padding: 12px 15px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    .options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .forgot-link {
        color: #007bff;
        text-decoration: none;
    }

    .login-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .login-button:hover {
            background: linear-gradient(135deg, #45a049, #4CAF50);
            box-shadow: 0 8px 20px rgba(76, 175, 80, 0.6);
            transform: translateY(-3px);
        }
</style>

@code {
    public class ResetPasswordModel
    {
        [Required]
        public string UserID { get; set; }

        [Required]
        public string CurrentPassword { get; set; }

        [Required]
        public string NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

    private ResetPasswordModel model = new ResetPasswordModel();

    private bool isSuccess = false;
    private bool isMismatch = false;

    private void HandleSubmit()
    {
        isMismatch = false;

        if (model.NewPassword != model.ConfirmPassword)
        {
            isMismatch = true;
            return;
        }

        // TODO: Add your password change logic here
        // Example: Validate current password, update new password in database

        isSuccess = true;
    }

    [Inject] NavigationManager NavManager { get; set; }

    private void GoToLogin()
    {
        NavManager.NavigateTo("/Users/Login1");
    }
}
