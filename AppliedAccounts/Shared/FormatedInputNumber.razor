@using AppliedAccounts.Services
<InputText @bind-Value="_displayValue"
@onblur="FormatValue"
@oninput="OnInputChanged"
@onfocusout="OnFocusOut"
class="form-control right" />

@code {
    [Parameter]
    public decimal Value { get; set; }

    [Parameter]
    public EventCallback<decimal> ValueChanged { get; set; }

    private string _displayValue;

    protected override void OnInitialized()
    {
        _displayValue = FormatDecimal(Value);
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        _displayValue = e.Value?.ToString() ?? "";

        if (decimal.TryParse(_displayValue, out var result))
        {
            // Invoke the event callback to update the parent component
            await ValueChanged.InvokeAsync(result);

            // Force the component to re-render after the update
            StateHasChanged();
        }
    }

    private async Task OnFocusOut()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void FormatValue()
    {
        if (decimal.TryParse(_displayValue, out var result))
        {
            _displayValue = FormatDecimal(result);
        }
    }

    private string FormatDecimal(decimal val)
    {
        return val.ToString(Format.Digit); // Customize the format as needed (e.g., two decimal places)
    }
}
